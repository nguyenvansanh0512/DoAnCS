package GiaoDien;

import DAO.AccountDAO;
import DAO.BillDAO;
import DAO.DrinksDAO;
import DAO.InvoicesDAO;
import DAO.MenuDAO;
import DAO.OrdersDAO;
import DAO.TablesDAO;
import DTO.Tables;
import DTO.Account;
import DTO.Bill;
import DTO.DrinkItem;
import DTO.Drinks;
import DTO.Invoices;
import DTO.Menu;

import Utilities.DBUtility;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author huyparody
 */
public class QuanLyThucDon extends javax.swing.JFrame {

    /**
     * Creates new form QuanLyThucDon
     */
    int idTable = -1;
    DefaultComboBoxModel<Drinks> comboBoxModel;
    DefaultTableModel tableModelTables;
    DefaultTableModel tableModelDrinks;
    int totalPrice = 0;

    public QuanLyThucDon() {
        initComponents();
        txtDisplay.setText("Xin chao: " + AccountDAO.getInstance().GetAccount().getName());
        tableModelTables = new DefaultTableModel();
        tableModelTables.addColumn("STT");
        tableModelTables.addColumn("Tên bàn");
        tableModelTables.addColumn("Trạng thái");
        tableModelTables.addColumn("Ghi chú");
        tblTables.setModel(tableModelTables);
        displayTables();

        tableModelDrinks = new DefaultTableModel();
        tableModelDrinks.addColumn("STT");
        tableModelDrinks.addColumn("Tên đồ uống");
        tableModelDrinks.addColumn("Giá");
        tableModelDrinks.addColumn("Số lượng");
        tableModelDrinks.addColumn("Thành tiền");
        tblOrder.setModel(tableModelDrinks);

        comboBoxModel = new DefaultComboBoxModel<>();
        Drinks mChon = new Drinks(-1, "---- Chọn đồ uống ----");
        comboBoxModel.addElement(mChon);
        cboDrinks.setModel(comboBoxModel);
        loadDrinks();
        new Thread() {
            public void run() {
                while (true) {
                    Calendar ca = new GregorianCalendar();
                    int hour = ca.get(Calendar.HOUR);
                    int minute = ca.get(Calendar.MINUTE);
                    int second = ca.get(Calendar.SECOND);

                    int PM_AM = ca.get(Calendar.AM_PM);

                    String day_night;
                    if (PM_AM == 1) {
                        day_night = "PM";
                    } else {
                        day_night = "AM";
                    }
                    String time = hour + ":" + minute + ":" + second + ":" + day_night;
                    jLabelDongho.setText(time);

                }
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTables = new javax.swing.JTable();
        cboDrinks = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        spnAmount = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        btnPay = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        btnHome = new javax.swing.JButton();
        txtDisplay = new javax.swing.JLabel();
        jLabelDongho = new javax.swing.JLabel();
        btxoa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý bán hàng");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/icons8-restaurant-menu-50.png"))); // NOI18N
        jLabel1.setText("Quản lý bán hàng");

        tblTables.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }));
        tblTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTables);

        cboDrinks.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboDrinks.setModel(
                new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDrinksActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/Plus_50px.png"))); // NOI18N
        btnAdd.setText("Thêm đồ uống");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        spnAmount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spnAmount.setValue(1);

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }));
        tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrder);

        btnPay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/Cash in Hand_50px.png"))); // NOI18N
        btnPay.setText("Thanh toán");
        btnPay.setEnabled(false);
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Tổng tiền");

        txtTotalPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTotalPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalPrice.setText("0");
        txtTotalPrice.setEnabled(false);

        btnHome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/Go Back_50px.png"))); // NOI18N
        btnHome.setText("Quay lại");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        txtDisplay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDisplay.setText("jLabel3");

        jLabelDongho.setText("jLabel3");

        btxoa.setText("Xóa");
        btxoa.setEnabled(false);
        btxoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btxoaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnHome))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cboDrinks, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(spnAmount, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 177,
                                                                Short.MAX_VALUE)
                                                        .addComponent(jLabelDongho,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE))))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 179,
                                                Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(btnPay)
                                                                .addComponent(txtTotalPrice,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 157,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(btxoa, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel1)
                                                        .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtDisplay,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 30,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                                layout.createSequentialGroup()
                                                        .addGap(15, 15, 15)
                                                        .addComponent(jLabelDongho,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 46,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(23, 23, 23)
                                                .addComponent(jScrollPane1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(23, 23, 23)
                                                                .addComponent(cboDrinks,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(spnAmount,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                                .createSequentialGroup()
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(btxoa,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                82,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(btnAdd,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                82,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(40, 40, 40)
                                                                .addComponent(jLabel2,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 26,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(txtTotalPrice,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 32,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(41, 41, 41)
                                                                .addComponent(btnPay,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 82,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jScrollPane2,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                                                                        Short.MAX_VALUE)))))
                                .addContainerGap(117, Short.MAX_VALUE)));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        // int invoiceId =
        // InvoicesDAO.getInstance().GetUncheckInvoiceByTableId(idTable);
        // Drinks drinks = (Drinks) cboDrinks.getSelectedItem();
        //
        // if (invoiceId == -1) {
        // InvoicesDAO.getInstance().Insert(idTable,
        // AccountDAO.getInstance().GetAccount().getId());
        // OrdersDAO.getInstance().Insert(drinks.getId(),
        // InvoicesDAO.getInstance().GetMaxIdInvoice(),
        // Integer.parseInt(spnAmount.getValue().toString()));
        // } else {
        // OrdersDAO.getInstance().Insert(drinks.getId(), invoiceId,
        // Integer.parseInt(spnAmount.getValue().toString()));
        // }
        // Connection con = DBUtility.openConnection();
        // PreparedStatement pstmt;
        // try {
        // pstmt = con.prepareStatement("update tables set status=1 where ID=?");
        // pstmt.setInt(1, idTable);
        // pstmt.executeUpdate();
        // displayTables();
        // displayTableDrinks();
        // btnPay.setEnabled(true);
        // cboDrinks.setSelectedIndex(0);
        // } catch (SQLException ex) {
        // Logger.getLogger(QuanLyThucDon.class.getName()).log(Level.SEVERE, null, ex);
        // }
        int invoiceId = InvoicesDAO.getInstance().GetUncheckInvoiceByTableId(idTable);
        Drinks drinks = (Drinks) cboDrinks.getSelectedItem();
        int count = Integer.parseInt(spnAmount.getValue().toString());

        if (invoiceId == -1) {
            InvoicesDAO.getInstance().Insert(idTable, AccountDAO.getInstance().GetAccount().getId());
            OrdersDAO.getInstance().Insert(drinks.getId(), InvoicesDAO.getInstance().GetMaxIdInvoice(), count);
        } else {
            if (OrdersDAO.getInstance().CheckOrderExist(drinks.getId(), invoiceId)) {
                OrdersDAO.getInstance().UpdateCount(drinks.getId(), invoiceId, count);
            } else {
                OrdersDAO.getInstance().Insert(drinks.getId(), invoiceId, count);
            }
        }
        Connection con = DBUtility.openConnection();
        PreparedStatement pstmt;
        try {
            pstmt = con.prepareStatement("update tables set status=1 where ID=?");
            pstmt.setInt(1, idTable);
            pstmt.executeUpdate();
            displayTables();
            displayTableDrinks();
            btnPay.setEnabled(true);
            cboDrinks.setSelectedIndex(0);
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyThucDon.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_btnAddActionPerformed

    private void cboDrinksActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cboDrinksActionPerformed
        // TODO add your handling code here:

    }// GEN-LAST:event_cboDrinksActionPerformed

    private void tblTablesMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblTablesMouseClicked
        // TODO add your handling code here:
        int row = tblTables.getSelectedRow();
        btnAdd.setEnabled(true);
        if ((tblTables.getValueAt(row, 2) + "").equals("Đã đặt")) {
            btnPay.setEnabled(true);
            btxoa.setEnabled(true);
        } else {
            btnPay.setEnabled(false);
            btxoa.setEnabled(false);
        }
        List<Tables> listTable = TablesDAO.getInstance().LoadListTables();
        idTable = listTable.get(row).getTableId();
        displayTableDrinks();
    }// GEN-LAST:event_tblTablesMouseClicked

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnPayActionPerformed
        try {
            // TODO add your handling code here:
            int finalTotalPrice = Integer.parseInt(txtTotalPrice.getText());
            int invoiceId = InvoicesDAO.getInstance().GetUncheckInvoiceByTableId(idTable);
            InvoicesDAO.getInstance().Update(invoiceId, finalTotalPrice);
            Connection con = DBUtility.openConnection();
            PreparedStatement pstmt = con.prepareStatement("update tables set status=0 where ID=?");
            pstmt.setInt(1, idTable);
            pstmt.executeUpdate();
            inHoaDon(invoiceId);
            displayTables();
            displayTableDrinks();
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyThucDon.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_btnPayActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnHomeActionPerformed

        dispose(); // TODO add your handling code here:
    }// GEN-LAST:event_btnHomeActionPerformed

    private void txtTotalPriceActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txtTotalPriceActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtTotalPriceActionPerformed

    private void btxoaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btxoaActionPerformed
        int selectedRow = tblOrder.getSelectedRow();
        if (selectedRow != -1) {
            int invoiceId = InvoicesDAO.getInstance().GetUncheckInvoiceByTableId(idTable);
            String drinkName = (String) tableModelDrinks.getValueAt(selectedRow, 1); // Giả định cột thứ hai là tên đồ
                                                                                     // uống
            int drinkId = DrinksDAO.getInstance().getDrinkIdByName(drinkName);
            // Lấy drinks_ID từ tên đồ uống

            if (OrdersDAO.getInstance().DeleteOrder(drinkId, invoiceId)) {
                JOptionPane.showMessageDialog(this, "Delete Succesful!!");
                displayTableDrinks();
            } else {
                JOptionPane.showMessageDialog(this, "Delete fail!!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seletet to Delete!!");
        }
    }// GEN-LAST:event_btxoaActionPerformed

    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblOrderMouseClicked

    }// GEN-LAST:event_tblOrderMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLyThucDon().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btxoa;
    private javax.swing.JComboBox cboDrinks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDongho;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spnAmount;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTable tblTables;
    private javax.swing.JLabel txtDisplay;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

    private void displayTables() {
        tableModelTables.setRowCount(0);
        List<Tables> listTable = TablesDAO.getInstance().LoadListTables();
        for (int i = 0; i < listTable.size(); i++) {
            Tables tables = listTable.get(i);
            Object[] dt = { i + 1, tables.getTableName(), tables.getTableStatus(), tables.getTableNote() };
            tableModelTables.addRow(dt);
        }
    }
    // Tổng giá bị lỗi

    private void displayTableDrinks() {
        tableModelDrinks.setRowCount(0);
        totalPrice = 0;

        List<Menu> listMenu = MenuDAO.getInstance().GetListMenuByTableId(idTable);

        for (int i = 0; i < listMenu.size(); i++) {
            Menu menu = listMenu.get(i);
            Object[] dt = { i + 1, menu.getDrinkName(), menu.getPrice(), menu.getCount(), menu.getTotalPrice() };
            totalPrice += menu.getTotalPrice();
            tableModelDrinks.addRow(dt);
        }

        txtTotalPrice.setText(totalPrice + "");

    }

    private void loadDrinks() {
        List<Drinks> listDrink = DrinksDAO.getInstance().GetListDrink();
        for (Drinks drinks : listDrink) {
            comboBoxModel.addElement(drinks);
        }
    }

    public static void inHoaDon(int id) {
        List<Bill> bills = BillDAO.getInstance().getListInvoicesByStatus(id); // Thay thế 1 bằng ID trạng thái cần lấy
                                                                              // hóa đơn

        // Tên tệp để lưu thông tin hóa đơn
        String fileName = "invoices.txt";

        try {
            FileWriter writer = new FileWriter(fileName);

            // In hóa đơn và lưu vào tệp
            // for (Bill bill : bills) {
            // writer.write("HÓA ĐƠN #" + bill.getId() + "\n");
            // writer.write("Người bán:" + bill.getName() + "\n");
            // writer.write("Bàn số: " + bill.getTable() + "\n");
            // writer.write("Tên đồ uống: " + bill.getDrinkName() + "\n");
            // writer.write("Ngày đặt: " + new SimpleDateFormat("yyyy-MM-dd
            // HH:mm:ss").format(bill.getDay()) + "\n");
            // writer.write("Số lượng: " + bill.getQuantity() + "\n");
            // writer.write("Đơn giá: " + bill.getPrice() + "VNĐ\n");
            // writer.write("----------------------------------\n");
            // writer.write("Tổng cộng: " + bill.getTotal() + "VNĐ\n");
            // }
            for (Bill bill : bills) {
                writer.write("HÓA ĐƠN #" + bill.getId() + "\n");
                writer.write("Người bán:" + bill.getName() + "\n");
                writer.write("Bàn số: " + bill.getTable() + "\n");

                // Lặp qua danh sách các sản phẩm trong hóa đơn
                for (DrinkItem item : bill.getDrinkItems()) {
                    writer.write("Tên đồ uống: " + item.getName() + " | ");
                    writer.write("Số lượng: " + item.getQuantity() + " | ");
                    writer.write("Đơn giá: " + item.getPrice() + " VNĐ\n");

                }
                writer.write("Ngày đặt: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(bill.getDay()) + "\n");
                writer.write("Tổng cộng: " + bill.getTotal() + " VNĐ\n");
                writer.write("----------------------------------\n");
            }

            writer.close();
            System.out.println("Thông tin hóa đơn đã được lưu vào tệp " + fileName);
        } catch (IOException e) {
            System.out.println("Đã xảy ra lỗi khi ghi vào tệp " + fileName);
            e.printStackTrace();
        }
    }
}
